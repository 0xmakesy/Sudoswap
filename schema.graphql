type NewPair @entity {
  id: ID!
  address: String
  owner: String
  blockNumber: BigInt
  createdAt: BigInt
  updatedAt: BigInt
  createdTx: String
  nft: String
  initialBondingCurveAddress: String
  initialAssetRecipient: String
  poolType: BigInt
  initialDelta: BigInt
  initialFeeMultiplier: BigDecimal
  initialSpotPrice: BigInt!
  initialNFTIdInventory: [BigInt!]
  initialInventoryCount: BigInt
  initialETHLiquidity: BigInt
  pair: Pair @derivedFrom(field:"initialAttributes")
}

type Pair @entity {
  id: ID!
  owner: String
  createdTx: String
  createdAt: BigInt
  updatedAt: BigInt
  nft: String
  bondingCurveAddress: String
  assetRecipient: String
  poolType: BigInt
  delta: BigInt
  feeMultiplier: BigDecimal
  spotPrice: BigInt
  nftIdInventory: [BigInt!]
  inventoryCount: BigInt
  ethLiquidity: BigInt
  initialAttributes: NewPair
}

type DailyETHPoolStat @entity {
  id: ID!
  dayTimestamp: BigInt
  dayString: String
  nftContract: String
  erc20Contract: String
  numSwaps: BigInt
  swapVolumeETH: BigInt
  approxPoolFees: BigInt
  approxProtocolFees: BigInt
  approxPoolRevenue: BigInt
  approxPoolSpent: BigInt
  ethDeposited: BigInt
  ethWithdrawn: BigInt
  nftsDeposited: BigInt
  nftsWithdrawn: BigInt
  numUserBuys: BigInt
  numUserSells: BigInt
}

type DailyETHPairStat @entity {
  id: ID!
  pair: String
  dayTimestamp: BigInt
  dayString: String
  nftContract: String
  erc20Contract: String
  numSwaps: BigInt
  swapVolumeETH: BigInt
  approxPairFees: BigInt
  approxProtocolFees: BigInt
  approxPairRevenue: BigInt
  approxPairSpent: BigInt
  ethDeposited: BigInt
  ethWithdrawn: BigInt
  nftsDeposited: BigInt
  nftsWithdrawn: BigInt
  minSpotAsk: BigInt
  maxSpotBid: BigInt
  numUserBuys: BigInt
  numUserSells: BigInt
}

type DailyETHProtocolStat @entity {
  id: ID!
  dayTimestamp: BigInt
  dayString: String
  numSwaps: BigInt
  swapVolumeETH: BigInt
  approxPoolFees: BigInt
  approxProtocolFees: BigInt
  approxPoolRevenue: BigInt
  approxPoolSpent: BigInt
  ethDeposited: BigInt
  ethWithdrawn: BigInt
  numPoolsCreated: BigInt
  numPairsCreated: BigInt
  nftsDeposited: BigInt
  nftsWithdrawn: BigInt
  numUserBuys: BigInt
  numUserSells: BigInt
}

type BondingCurveStatusUpdate @entity {
  id: ID!
  allowed: String
  address: String
}

type AssetRecipientChange @entity {
  id: ID!
  a: Bytes! # address
  pair: String
  timestamp: BigInt
}

type DeltaUpdate @entity {
  id: ID!
  newDelta: BigInt! # uint128
  pair: String
  timestamp: BigInt
}

type FeeUpdate @entity {
  id: ID!
  newFee: BigInt! # uint96
  pair: String
  timestamp: BigInt
}

type NFTWithdrawal @entity {
  id: ID!
  pair: String
  timestamp: BigInt
}

type NFTDeposit @entity {
  id: ID!
  pair: String
  timestamp: BigInt
}

type OwnershipTransferred @entity {
  id: ID!
  newOwner: Bytes! # address
  pair: String
  timestamp: BigInt
}

type SpotPrice @entity {
  id: ID!
  newSpotPrice: BigInt! # uint128
  updateTx: String
  nft: String
  pair: String
  blockNumber: BigInt
  timestamp: BigInt
}

type ProtocolFeeMultiplier @entity {
  id: ID!
  protocolFeeMultiplier: BigDecimal!
}

type PoolNFTBuy @entity {
  id: ID!
  ethPaidByPool: BigInt!
  pair: String!
  fee: BigInt!
  protocolFee: BigInt!
  timestamp: BigInt!
  nft: String!
}

type PoolNFTSale @entity {
  id: ID!
  ethReceivedByPool: BigInt!
  pair: String!
  fee: BigInt!
  protocolFee: BigInt!
  timestamp: BigInt!
  nft: String!
}

type TokenDeposit @entity {
  id: ID!
  amountDeposited: BigInt! # uint256
  pair: String
  timestamp: BigInt
}

type TokenWithdrawal @entity {
  id: ID!
  amountWithdrawn: BigInt! # uint256
  pair: String
  timestamp: BigInt
}
